//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/org/bouncycastle/openpgp/operator/jcajce/JcaPGPKeyConverter.java
//

#include "ASN1Encodable.h"
#include "ASN1ObjectIdentifier.h"
#include "ASN1OctetString.h"
#include "AlgorithmIdentifier.h"
#include "Arrays.h"
#include "BCPGKey.h"
#include "BigIntegers.h"
#include "CryptlibObjectIdentifiers.h"
#include "DERBitString.h"
#include "DEROctetString.h"
#include "DSAPublicBCPGKey.h"
#include "DSASecretBCPGKey.h"
#include "DefaultJcaJceHelper.h"
#include "ECCurve.h"
#include "ECDHPublicBCPGKey.h"
#include "ECDSAPublicBCPGKey.h"
#include "ECFieldElement.h"
#include "ECNamedCurveTable.h"
#include "ECPoint.h"
#include "ECSecretBCPGKey.h"
#include "EdECObjectIdentifiers.h"
#include "ElGamalPublicBCPGKey.h"
#include "ElGamalSecretBCPGKey.h"
#include "HashAlgorithmTags.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JcaJcePGPUtil.h"
#include "JcaKeyFingerprintCalculator.h"
#include "JcaPGPKeyConverter.h"
#include "JcaPGPPrivateKey.h"
#include "KeyFingerPrintCalculator.h"
#include "NamedJcaJceHelper.h"
#include "OperatorHelper.h"
#include "PGPAlgorithmParameters.h"
#include "PGPException.h"
#include "PGPKdfParameters.h"
#include "PGPPrivateKey.h"
#include "PGPPublicKey.h"
#include "PrivateKeyInfo.h"
#include "ProviderJcaJceHelper.h"
#include "PublicKeyAlgorithmTags.h"
#include "PublicKeyPacket.h"
#include "RSAPublicBCPGKey.h"
#include "RSASecretBCPGKey.h"
#include "SubjectPublicKeyInfo.h"
#include "SymmetricKeyAlgorithmTags.h"
#include "X9ECParameters.h"
#include "X9ECPoint.h"
#include "java/lang/Exception.h"
#include "java/math/BigInteger.h"
#include "java/security/AlgorithmParameters.h"
#include "java/security/KeyFactory.h"
#include "java/security/PrivateKey.h"
#include "java/security/Provider.h"
#include "java/security/PublicKey.h"
#include "java/security/interfaces/DSAParams.h"
#include "java/security/interfaces/DSAPrivateKey.h"
#include "java/security/interfaces/DSAPublicKey.h"
#include "java/security/interfaces/ECPrivateKey.h"
#include "java/security/interfaces/ECPublicKey.h"
#include "java/security/interfaces/RSAPrivateCrtKey.h"
#include "java/security/interfaces/RSAPublicKey.h"
#include "java/security/spec/DSAPrivateKeySpec.h"
#include "java/security/spec/DSAPublicKeySpec.h"
#include "java/security/spec/ECGenParameterSpec.h"
#include "java/security/spec/ECParameterSpec.h"
#include "java/security/spec/ECPoint.h"
#include "java/security/spec/ECPrivateKeySpec.h"
#include "java/security/spec/ECPublicKeySpec.h"
#include "java/security/spec/PKCS8EncodedKeySpec.h"
#include "java/security/spec/RSAPrivateCrtKeySpec.h"
#include "java/security/spec/RSAPublicKeySpec.h"
#include "java/util/Date.h"
#include "javax/crypto/interfaces/DHPrivateKey.h"
#include "javax/crypto/interfaces/DHPublicKey.h"
#include "javax/crypto/spec/DHParameterSpec.h"
#include "javax/crypto/spec/DHPrivateKeySpec.h"
#include "javax/crypto/spec/DHPublicKeySpec.h"

@interface LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter () {
 @public
  LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper *helper_;
  id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator> fingerPrintCalculator_;
}

- (JavaSecuritySpecECParameterSpec *)getECParameterSpecWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)curveOid;

- (JavaSecuritySpecECParameterSpec *)getECParameterSpecWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)curveOid
                                                           withLibOrgBouncycastleAsn1X9X9ECParameters:(LibOrgBouncycastleAsn1X9X9ECParameters *)x9Params;

@end

J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter, helper_, LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper *)
J2OBJC_FIELD_SETTER(LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter, fingerPrintCalculator_, id<LibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator>)

__attribute__((unused)) static JavaSecuritySpecECParameterSpec *LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter_getECParameterSpecWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter *self, LibOrgBouncycastleAsn1ASN1ObjectIdentifier *curveOid);

__attribute__((unused)) static JavaSecuritySpecECParameterSpec *LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter_getECParameterSpecWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1X9X9ECParameters_(LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter *self, LibOrgBouncycastleAsn1ASN1ObjectIdentifier *curveOid, LibOrgBouncycastleAsn1X9X9ECParameters *x9Params);

@implementation LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter *)setProviderWithJavaSecurityProvider:(JavaSecurityProvider *)provider {
  self->helper_ = new_LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper_initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_(new_LibOrgBouncycastleJcajceUtilProviderJcaJceHelper_initWithJavaSecurityProvider_(provider));
  return self;
}

- (LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter *)setProviderWithNSString:(NSString *)providerName {
  self->helper_ = new_LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper_initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_(new_LibOrgBouncycastleJcajceUtilNamedJcaJceHelper_initWithNSString_(providerName));
  return self;
}

- (id<JavaSecurityPublicKey>)getPublicKeyWithLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)publicKey {
  JavaSecurityKeyFactory *fact;
  LibOrgBouncycastleBcpgPublicKeyPacket *publicPk = [((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk(publicKey)) getPublicKeyPacket];
  @try {
    {
      LibOrgBouncycastleBcpgRSAPublicBCPGKey *rsaK;
      JavaSecuritySpecRSAPublicKeySpec *rsaSpec;
      LibOrgBouncycastleBcpgDSAPublicBCPGKey *dsaK;
      JavaSecuritySpecDSAPublicKeySpec *dsaSpec;
      LibOrgBouncycastleBcpgElGamalPublicBCPGKey *elK;
      JavaxCryptoSpecDHPublicKeySpec *elSpec;
      LibOrgBouncycastleBcpgECDHPublicBCPGKey *ecdhK;
      LibOrgBouncycastleAsn1X9X9ECParameters *ecdhParams;
      LibOrgBouncycastleMathEcECPoint *ecdhPoint;
      JavaSecuritySpecECPublicKeySpec *ecDhSpec;
      LibOrgBouncycastleBcpgECDSAPublicBCPGKey *ecdsaK;
      LibOrgBouncycastleAsn1X9X9ECParameters *ecdsaParams;
      LibOrgBouncycastleMathEcECPoint *ecdsaPoint;
      JavaSecuritySpecECPublicKeySpec *ecDsaSpec;
      switch ([((LibOrgBouncycastleBcpgPublicKeyPacket *) nil_chk(publicPk)) getAlgorithm]) {
        case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_RSA_ENCRYPT:
        case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_RSA_GENERAL:
        case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_RSA_SIGN:
        rsaK = (LibOrgBouncycastleBcpgRSAPublicBCPGKey *) cast_chk([publicPk getKey], [LibOrgBouncycastleBcpgRSAPublicBCPGKey class]);
        rsaSpec = new_JavaSecuritySpecRSAPublicKeySpec_initWithJavaMathBigInteger_withJavaMathBigInteger_([((LibOrgBouncycastleBcpgRSAPublicBCPGKey *) nil_chk(rsaK)) getModulus], [rsaK getPublicExponent]);
        fact = [((LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper *) nil_chk(helper_)) createKeyFactoryWithNSString:@"RSA"];
        return [((JavaSecurityKeyFactory *) nil_chk(fact)) generatePublicWithJavaSecuritySpecKeySpec:rsaSpec];
        case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_DSA:
        dsaK = (LibOrgBouncycastleBcpgDSAPublicBCPGKey *) cast_chk([publicPk getKey], [LibOrgBouncycastleBcpgDSAPublicBCPGKey class]);
        dsaSpec = new_JavaSecuritySpecDSAPublicKeySpec_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_([((LibOrgBouncycastleBcpgDSAPublicBCPGKey *) nil_chk(dsaK)) getY], [dsaK getP], [dsaK getQ], [dsaK getG]);
        fact = [((LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper *) nil_chk(helper_)) createKeyFactoryWithNSString:@"DSA"];
        return [((JavaSecurityKeyFactory *) nil_chk(fact)) generatePublicWithJavaSecuritySpecKeySpec:dsaSpec];
        case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_ELGAMAL_ENCRYPT:
        case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_ELGAMAL_GENERAL:
        elK = (LibOrgBouncycastleBcpgElGamalPublicBCPGKey *) cast_chk([publicPk getKey], [LibOrgBouncycastleBcpgElGamalPublicBCPGKey class]);
        elSpec = new_JavaxCryptoSpecDHPublicKeySpec_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_([((LibOrgBouncycastleBcpgElGamalPublicBCPGKey *) nil_chk(elK)) getY], [elK getP], [elK getG]);
        fact = [((LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper *) nil_chk(helper_)) createKeyFactoryWithNSString:@"ElGamal"];
        return [((JavaSecurityKeyFactory *) nil_chk(fact)) generatePublicWithJavaSecuritySpecKeySpec:elSpec];
        case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_ECDH:
        ecdhK = (LibOrgBouncycastleBcpgECDHPublicBCPGKey *) cast_chk([publicPk getKey], [LibOrgBouncycastleBcpgECDHPublicBCPGKey class]);
        ecdhParams = LibOrgBouncycastleOpenpgpOperatorJcajceJcaJcePGPUtil_getX9ParametersWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_([((LibOrgBouncycastleBcpgECDHPublicBCPGKey *) nil_chk(ecdhK)) getCurveOID]);
        ecdhPoint = LibOrgBouncycastleOpenpgpOperatorJcajceJcaJcePGPUtil_decodePointWithJavaMathBigInteger_withLibOrgBouncycastleMathEcECCurve_([ecdhK getEncodedPoint], [((LibOrgBouncycastleAsn1X9X9ECParameters *) nil_chk(ecdhParams)) getCurve]);
        ecDhSpec = new_JavaSecuritySpecECPublicKeySpec_initWithJavaSecuritySpecECPoint_withJavaSecuritySpecECParameterSpec_(new_JavaSecuritySpecECPoint_initWithJavaMathBigInteger_withJavaMathBigInteger_([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECPoint *) nil_chk(ecdhPoint)) getAffineXCoord])) toBigInteger], [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([ecdhPoint getAffineYCoord])) toBigInteger]), LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter_getECParameterSpecWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1X9X9ECParameters_(self, [ecdhK getCurveOID], ecdhParams));
        fact = [((LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper *) nil_chk(helper_)) createKeyFactoryWithNSString:@"ECDH"];
        return [((JavaSecurityKeyFactory *) nil_chk(fact)) generatePublicWithJavaSecuritySpecKeySpec:ecDhSpec];
        case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_ECDSA:
        ecdsaK = (LibOrgBouncycastleBcpgECDSAPublicBCPGKey *) cast_chk([publicPk getKey], [LibOrgBouncycastleBcpgECDSAPublicBCPGKey class]);
        ecdsaParams = LibOrgBouncycastleOpenpgpOperatorJcajceJcaJcePGPUtil_getX9ParametersWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_([((LibOrgBouncycastleBcpgECDSAPublicBCPGKey *) nil_chk(ecdsaK)) getCurveOID]);
        ecdsaPoint = LibOrgBouncycastleOpenpgpOperatorJcajceJcaJcePGPUtil_decodePointWithJavaMathBigInteger_withLibOrgBouncycastleMathEcECCurve_([ecdsaK getEncodedPoint], [((LibOrgBouncycastleAsn1X9X9ECParameters *) nil_chk(ecdsaParams)) getCurve]);
        ecDsaSpec = new_JavaSecuritySpecECPublicKeySpec_initWithJavaSecuritySpecECPoint_withJavaSecuritySpecECParameterSpec_(new_JavaSecuritySpecECPoint_initWithJavaMathBigInteger_withJavaMathBigInteger_([((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([((LibOrgBouncycastleMathEcECPoint *) nil_chk(ecdsaPoint)) getAffineXCoord])) toBigInteger], [((LibOrgBouncycastleMathEcECFieldElement *) nil_chk([ecdsaPoint getAffineYCoord])) toBigInteger]), LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter_getECParameterSpecWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1X9X9ECParameters_(self, [ecdsaK getCurveOID], ecdsaParams));
        fact = [((LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper *) nil_chk(helper_)) createKeyFactoryWithNSString:@"ECDSA"];
        return [((JavaSecurityKeyFactory *) nil_chk(fact)) generatePublicWithJavaSecuritySpecKeySpec:ecDsaSpec];
        default:
        @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(@"unknown public key algorithm encountered");
      }
    }
  }
  @catch (LibOrgBouncycastleOpenpgpPGPException *e) {
    @throw e;
  }
  @catch (JavaLangException *e) {
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_withJavaLangException_(@"exception constructing public key", e);
  }
}

- (LibOrgBouncycastleOpenpgpPGPPublicKey *)getPGPPublicKeyWithInt:(jint)algorithm
              withLibOrgBouncycastleOpenpgpPGPAlgorithmParameters:(id<LibOrgBouncycastleOpenpgpPGPAlgorithmParameters>)algorithmParameters
                                        withJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)pubKey
                                                 withJavaUtilDate:(JavaUtilDate *)time {
  id<LibOrgBouncycastleBcpgBCPGKey> bcpgKey;
  if ([JavaSecurityInterfacesRSAPublicKey_class_() isInstance:pubKey]) {
    id<JavaSecurityInterfacesRSAPublicKey> rK = (id<JavaSecurityInterfacesRSAPublicKey>) cast_check(pubKey, JavaSecurityInterfacesRSAPublicKey_class_());
    bcpgKey = new_LibOrgBouncycastleBcpgRSAPublicBCPGKey_initWithJavaMathBigInteger_withJavaMathBigInteger_([((id<JavaSecurityInterfacesRSAPublicKey>) nil_chk(rK)) getModulus], [rK getPublicExponent]);
  }
  else if ([JavaSecurityInterfacesDSAPublicKey_class_() isInstance:pubKey]) {
    id<JavaSecurityInterfacesDSAPublicKey> dK = (id<JavaSecurityInterfacesDSAPublicKey>) cast_check(pubKey, JavaSecurityInterfacesDSAPublicKey_class_());
    id<JavaSecurityInterfacesDSAParams> dP = [((id<JavaSecurityInterfacesDSAPublicKey>) nil_chk(dK)) getParams];
    bcpgKey = new_LibOrgBouncycastleBcpgDSAPublicBCPGKey_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_([((id<JavaSecurityInterfacesDSAParams>) nil_chk(dP)) getP], [dP getQ], [dP getG], [dK getY]);
  }
  else if ([JavaxCryptoInterfacesDHPublicKey_class_() isInstance:pubKey]) {
    id<JavaxCryptoInterfacesDHPublicKey> eK = (id<JavaxCryptoInterfacesDHPublicKey>) cast_check(pubKey, JavaxCryptoInterfacesDHPublicKey_class_());
    JavaxCryptoSpecDHParameterSpec *eS = [((id<JavaxCryptoInterfacesDHPublicKey>) nil_chk(eK)) getParams];
    bcpgKey = new_LibOrgBouncycastleBcpgElGamalPublicBCPGKey_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_([((JavaxCryptoSpecDHParameterSpec *) nil_chk(eS)) getP], [eS getG], [eK getY]);
  }
  else if ([JavaSecurityInterfacesECPublicKey_class_() isInstance:pubKey]) {
    LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *keyInfo = LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo_getInstanceWithId_([((id<JavaSecurityPublicKey>) nil_chk(pubKey)) getEncoded]);
    LibOrgBouncycastleAsn1ASN1ObjectIdentifier *curveOid = LibOrgBouncycastleAsn1ASN1ObjectIdentifier_getInstanceWithId_([((LibOrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([((LibOrgBouncycastleAsn1X509SubjectPublicKeyInfo *) nil_chk(keyInfo)) getAlgorithm])) getParameters]);
    LibOrgBouncycastleAsn1X9X9ECParameters *params = LibOrgBouncycastleAsn1X9ECNamedCurveTable_getByOIDWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(curveOid);
    LibOrgBouncycastleAsn1ASN1OctetString *key = new_LibOrgBouncycastleAsn1DEROctetString_initWithByteArray_([((LibOrgBouncycastleAsn1DERBitString *) nil_chk([keyInfo getPublicKeyData])) getBytes]);
    LibOrgBouncycastleAsn1X9X9ECPoint *derQ = new_LibOrgBouncycastleAsn1X9X9ECPoint_initWithLibOrgBouncycastleMathEcECCurve_withLibOrgBouncycastleAsn1ASN1OctetString_([((LibOrgBouncycastleAsn1X9X9ECParameters *) nil_chk(params)) getCurve], key);
    if (algorithm == LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_ECDH) {
      LibOrgBouncycastleOpenpgpPGPKdfParameters *kdfParams = (LibOrgBouncycastleOpenpgpPGPKdfParameters *) cast_chk(algorithmParameters, [LibOrgBouncycastleOpenpgpPGPKdfParameters class]);
      if (kdfParams == nil) {
        kdfParams = new_LibOrgBouncycastleOpenpgpPGPKdfParameters_initWithInt_withInt_(LibOrgBouncycastleBcpgHashAlgorithmTags_SHA256, LibOrgBouncycastleBcpgSymmetricKeyAlgorithmTags_AES_128);
      }
      bcpgKey = new_LibOrgBouncycastleBcpgECDHPublicBCPGKey_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleMathEcECPoint_withInt_withInt_(curveOid, [derQ getPoint], [kdfParams getHashAlgorithm], [kdfParams getSymmetricWrapAlgorithm]);
    }
    else if (algorithm == LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_ECDSA) {
      bcpgKey = new_LibOrgBouncycastleBcpgECDSAPublicBCPGKey_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleMathEcECPoint_(curveOid, [derQ getPoint]);
    }
    else {
      @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(@"unknown EC algorithm");
    }
  }
  else {
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(@"unknown key class");
  }
  return new_LibOrgBouncycastleOpenpgpPGPPublicKey_initWithLibOrgBouncycastleBcpgPublicKeyPacket_withLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator_(new_LibOrgBouncycastleBcpgPublicKeyPacket_initWithInt_withJavaUtilDate_withLibOrgBouncycastleBcpgBCPGKey_(algorithm, time, bcpgKey), fingerPrintCalculator_);
}

- (LibOrgBouncycastleOpenpgpPGPPublicKey *)getPGPPublicKeyWithInt:(jint)algorithm
                                        withJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)pubKey
                                                 withJavaUtilDate:(JavaUtilDate *)time {
  return [self getPGPPublicKeyWithInt:algorithm withLibOrgBouncycastleOpenpgpPGPAlgorithmParameters:nil withJavaSecurityPublicKey:pubKey withJavaUtilDate:time];
}

- (id<JavaSecurityPrivateKey>)getPrivateKeyWithLibOrgBouncycastleOpenpgpPGPPrivateKey:(LibOrgBouncycastleOpenpgpPGPPrivateKey *)privKey {
  if ([privKey isKindOfClass:[LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPPrivateKey class]]) {
    return [((LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPPrivateKey *) nil_chk(((LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPPrivateKey *) privKey))) getPrivateKey];
  }
  LibOrgBouncycastleBcpgPublicKeyPacket *pubPk = [((LibOrgBouncycastleOpenpgpPGPPrivateKey *) nil_chk(privKey)) getPublicKeyPacket];
  id<LibOrgBouncycastleBcpgBCPGKey> privPk = [privKey getPrivateKeyDataPacket];
  @try {
    JavaSecurityKeyFactory *fact;
    {
      LibOrgBouncycastleBcpgRSAPublicBCPGKey *rsaPub;
      LibOrgBouncycastleBcpgRSASecretBCPGKey *rsaPriv;
      JavaSecuritySpecRSAPrivateCrtKeySpec *rsaPrivSpec;
      LibOrgBouncycastleBcpgDSAPublicBCPGKey *dsaPub;
      LibOrgBouncycastleBcpgDSASecretBCPGKey *dsaPriv;
      JavaSecuritySpecDSAPrivateKeySpec *dsaPrivSpec;
      LibOrgBouncycastleBcpgECDHPublicBCPGKey *ecdhPub;
      LibOrgBouncycastleBcpgECSecretBCPGKey *ecdhK;
      LibOrgBouncycastleBcpgECDSAPublicBCPGKey *ecdsaPub;
      LibOrgBouncycastleBcpgECSecretBCPGKey *ecdsaK;
      JavaSecuritySpecECPrivateKeySpec *ecDsaSpec;
      LibOrgBouncycastleBcpgElGamalPublicBCPGKey *elPub;
      LibOrgBouncycastleBcpgElGamalSecretBCPGKey *elPriv;
      JavaxCryptoSpecDHPrivateKeySpec *elSpec;
      switch ([((LibOrgBouncycastleBcpgPublicKeyPacket *) nil_chk(pubPk)) getAlgorithm]) {
        case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_RSA_ENCRYPT:
        case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_RSA_GENERAL:
        case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_RSA_SIGN:
        rsaPub = (LibOrgBouncycastleBcpgRSAPublicBCPGKey *) cast_chk([pubPk getKey], [LibOrgBouncycastleBcpgRSAPublicBCPGKey class]);
        rsaPriv = (LibOrgBouncycastleBcpgRSASecretBCPGKey *) cast_chk(privPk, [LibOrgBouncycastleBcpgRSASecretBCPGKey class]);
        rsaPrivSpec = new_JavaSecuritySpecRSAPrivateCrtKeySpec_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_([((LibOrgBouncycastleBcpgRSASecretBCPGKey *) nil_chk(rsaPriv)) getModulus], [((LibOrgBouncycastleBcpgRSAPublicBCPGKey *) nil_chk(rsaPub)) getPublicExponent], [rsaPriv getPrivateExponent], [rsaPriv getPrimeP], [rsaPriv getPrimeQ], [rsaPriv getPrimeExponentP], [rsaPriv getPrimeExponentQ], [rsaPriv getCrtCoefficient]);
        fact = [((LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper *) nil_chk(helper_)) createKeyFactoryWithNSString:@"RSA"];
        return [((JavaSecurityKeyFactory *) nil_chk(fact)) generatePrivateWithJavaSecuritySpecKeySpec:rsaPrivSpec];
        case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_DSA:
        dsaPub = (LibOrgBouncycastleBcpgDSAPublicBCPGKey *) cast_chk([pubPk getKey], [LibOrgBouncycastleBcpgDSAPublicBCPGKey class]);
        dsaPriv = (LibOrgBouncycastleBcpgDSASecretBCPGKey *) cast_chk(privPk, [LibOrgBouncycastleBcpgDSASecretBCPGKey class]);
        dsaPrivSpec = new_JavaSecuritySpecDSAPrivateKeySpec_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_([((LibOrgBouncycastleBcpgDSASecretBCPGKey *) nil_chk(dsaPriv)) getX], [((LibOrgBouncycastleBcpgDSAPublicBCPGKey *) nil_chk(dsaPub)) getP], [dsaPub getQ], [dsaPub getG]);
        fact = [((LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper *) nil_chk(helper_)) createKeyFactoryWithNSString:@"DSA"];
        return [((JavaSecurityKeyFactory *) nil_chk(fact)) generatePrivateWithJavaSecuritySpecKeySpec:dsaPrivSpec];
        case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_ECDH:
        ecdhPub = (LibOrgBouncycastleBcpgECDHPublicBCPGKey *) cast_chk([pubPk getKey], [LibOrgBouncycastleBcpgECDHPublicBCPGKey class]);
        ecdhK = (LibOrgBouncycastleBcpgECSecretBCPGKey *) cast_chk(privPk, [LibOrgBouncycastleBcpgECSecretBCPGKey class]);
        if ([((LibOrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(LibOrgBouncycastleAsn1CryptlibCryptlibObjectIdentifiers, curvey25519))) isEqual:[((LibOrgBouncycastleBcpgECDHPublicBCPGKey *) nil_chk(ecdhPub)) getCurveOID]]) {
          LibOrgBouncycastleAsn1PkcsPrivateKeyInfo *ecDhSpec = new_LibOrgBouncycastleAsn1PkcsPrivateKeyInfo_initWithLibOrgBouncycastleAsn1X509AlgorithmIdentifier_withLibOrgBouncycastleAsn1ASN1Encodable_(new_LibOrgBouncycastleAsn1X509AlgorithmIdentifier_initWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(JreLoadStatic(LibOrgBouncycastleAsn1EdecEdECObjectIdentifiers, id_X25519)), new_LibOrgBouncycastleAsn1DEROctetString_initWithByteArray_(LibOrgBouncycastleUtilArrays_reverseWithByteArray_(LibOrgBouncycastleUtilBigIntegers_asUnsignedByteArrayWithJavaMathBigInteger_([((LibOrgBouncycastleBcpgECSecretBCPGKey *) nil_chk(ecdhK)) getX]))));
          fact = [((LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper *) nil_chk(helper_)) createKeyFactoryWithNSString:@"XDH"];
          return [((JavaSecurityKeyFactory *) nil_chk(fact)) generatePrivateWithJavaSecuritySpecKeySpec:new_JavaSecuritySpecPKCS8EncodedKeySpec_initWithByteArray_([ecDhSpec getEncoded])];
        }
        else {
          JavaSecuritySpecECPrivateKeySpec *ecDhSpec = new_JavaSecuritySpecECPrivateKeySpec_initWithJavaMathBigInteger_withJavaSecuritySpecECParameterSpec_([((LibOrgBouncycastleBcpgECSecretBCPGKey *) nil_chk(ecdhK)) getX], LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter_getECParameterSpecWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(self, [ecdhPub getCurveOID]));
          fact = [((LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper *) nil_chk(helper_)) createKeyFactoryWithNSString:@"ECDH"];
          return [((JavaSecurityKeyFactory *) nil_chk(fact)) generatePrivateWithJavaSecuritySpecKeySpec:ecDhSpec];
        }
        case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_ECDSA:
        ecdsaPub = (LibOrgBouncycastleBcpgECDSAPublicBCPGKey *) cast_chk([pubPk getKey], [LibOrgBouncycastleBcpgECDSAPublicBCPGKey class]);
        ecdsaK = (LibOrgBouncycastleBcpgECSecretBCPGKey *) cast_chk(privPk, [LibOrgBouncycastleBcpgECSecretBCPGKey class]);
        ecDsaSpec = new_JavaSecuritySpecECPrivateKeySpec_initWithJavaMathBigInteger_withJavaSecuritySpecECParameterSpec_([((LibOrgBouncycastleBcpgECSecretBCPGKey *) nil_chk(ecdsaK)) getX], LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter_getECParameterSpecWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(self, [((LibOrgBouncycastleBcpgECDSAPublicBCPGKey *) nil_chk(ecdsaPub)) getCurveOID]));
        fact = [((LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper *) nil_chk(helper_)) createKeyFactoryWithNSString:@"ECDSA"];
        return [((JavaSecurityKeyFactory *) nil_chk(fact)) generatePrivateWithJavaSecuritySpecKeySpec:ecDsaSpec];
        case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_ELGAMAL_ENCRYPT:
        case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_ELGAMAL_GENERAL:
        elPub = (LibOrgBouncycastleBcpgElGamalPublicBCPGKey *) cast_chk([pubPk getKey], [LibOrgBouncycastleBcpgElGamalPublicBCPGKey class]);
        elPriv = (LibOrgBouncycastleBcpgElGamalSecretBCPGKey *) cast_chk(privPk, [LibOrgBouncycastleBcpgElGamalSecretBCPGKey class]);
        elSpec = new_JavaxCryptoSpecDHPrivateKeySpec_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_([((LibOrgBouncycastleBcpgElGamalSecretBCPGKey *) nil_chk(elPriv)) getX], [((LibOrgBouncycastleBcpgElGamalPublicBCPGKey *) nil_chk(elPub)) getP], [elPub getG]);
        fact = [((LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper *) nil_chk(helper_)) createKeyFactoryWithNSString:@"ElGamal"];
        return [((JavaSecurityKeyFactory *) nil_chk(fact)) generatePrivateWithJavaSecuritySpecKeySpec:elSpec];
        default:
        @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(@"unknown public key algorithm encountered");
      }
    }
  }
  @catch (LibOrgBouncycastleOpenpgpPGPException *e) {
    @throw e;
  }
  @catch (JavaLangException *e) {
    @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_withJavaLangException_(@"Exception constructing key", e);
  }
}

- (LibOrgBouncycastleOpenpgpPGPPrivateKey *)getPGPPrivateKeyWithLibOrgBouncycastleOpenpgpPGPPublicKey:(LibOrgBouncycastleOpenpgpPGPPublicKey *)pub
                                                                           withJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)privKey {
  id<LibOrgBouncycastleBcpgBCPGKey> privPk;
  {
    id<JavaSecurityInterfacesRSAPrivateCrtKey> rsK;
    id<JavaSecurityInterfacesDSAPrivateKey> dsK;
    id<JavaxCryptoInterfacesDHPrivateKey> esK;
    id<JavaSecurityInterfacesECPrivateKey> ecK;
    switch ([((LibOrgBouncycastleOpenpgpPGPPublicKey *) nil_chk(pub)) getAlgorithm]) {
      case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_RSA_ENCRYPT:
      case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_RSA_SIGN:
      case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_RSA_GENERAL:
      rsK = (id<JavaSecurityInterfacesRSAPrivateCrtKey>) cast_check(privKey, JavaSecurityInterfacesRSAPrivateCrtKey_class_());
      privPk = new_LibOrgBouncycastleBcpgRSASecretBCPGKey_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_([((id<JavaSecurityInterfacesRSAPrivateCrtKey>) nil_chk(rsK)) getPrivateExponent], [rsK getPrimeP], [rsK getPrimeQ]);
      break;
      case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_DSA:
      dsK = (id<JavaSecurityInterfacesDSAPrivateKey>) cast_check(privKey, JavaSecurityInterfacesDSAPrivateKey_class_());
      privPk = new_LibOrgBouncycastleBcpgDSASecretBCPGKey_initWithJavaMathBigInteger_([((id<JavaSecurityInterfacesDSAPrivateKey>) nil_chk(dsK)) getX]);
      break;
      case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_ELGAMAL_ENCRYPT:
      case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_ELGAMAL_GENERAL:
      esK = (id<JavaxCryptoInterfacesDHPrivateKey>) cast_check(privKey, JavaxCryptoInterfacesDHPrivateKey_class_());
      privPk = new_LibOrgBouncycastleBcpgElGamalSecretBCPGKey_initWithJavaMathBigInteger_([((id<JavaxCryptoInterfacesDHPrivateKey>) nil_chk(esK)) getX]);
      break;
      case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_ECDH:
      case LibOrgBouncycastleBcpgPublicKeyAlgorithmTags_ECDSA:
      ecK = (id<JavaSecurityInterfacesECPrivateKey>) cast_check(privKey, JavaSecurityInterfacesECPrivateKey_class_());
      privPk = new_LibOrgBouncycastleBcpgECSecretBCPGKey_initWithJavaMathBigInteger_([((id<JavaSecurityInterfacesECPrivateKey>) nil_chk(ecK)) getS]);
      break;
      default:
      @throw new_LibOrgBouncycastleOpenpgpPGPException_initWithNSString_(@"unknown key class");
    }
  }
  return new_LibOrgBouncycastleOpenpgpPGPPrivateKey_initWithLong_withLibOrgBouncycastleBcpgPublicKeyPacket_withLibOrgBouncycastleBcpgBCPGKey_([pub getKeyID], [pub getPublicKeyPacket], privPk);
}

- (JavaSecuritySpecECParameterSpec *)getECParameterSpecWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)curveOid {
  return LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter_getECParameterSpecWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(self, curveOid);
}

- (JavaSecuritySpecECParameterSpec *)getECParameterSpecWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:(LibOrgBouncycastleAsn1ASN1ObjectIdentifier *)curveOid
                                                           withLibOrgBouncycastleAsn1X9X9ECParameters:(LibOrgBouncycastleAsn1X9X9ECParameters *)x9Params {
  return LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter_getECParameterSpecWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1X9X9ECParameters_(self, curveOid, x9Params);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter;", 0x1, 0, 2, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityPublicKey;", 0x1, 3, 4, 5, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPPublicKey;", 0x1, 6, 7, 5, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPPublicKey;", 0x1, 6, 8, 5, -1, -1, -1 },
    { NULL, "LJavaSecurityPrivateKey;", 0x1, 9, 10, 5, -1, -1, -1 },
    { NULL, "LLibOrgBouncycastleOpenpgpPGPPrivateKey;", 0x1, 11, 12, 5, -1, -1, -1 },
    { NULL, "LJavaSecuritySpecECParameterSpec;", 0x2, 13, 14, 15, -1, -1, -1 },
    { NULL, "LJavaSecuritySpecECParameterSpec;", 0x2, 13, 16, 17, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setProviderWithJavaSecurityProvider:);
  methods[2].selector = @selector(setProviderWithNSString:);
  methods[3].selector = @selector(getPublicKeyWithLibOrgBouncycastleOpenpgpPGPPublicKey:);
  methods[4].selector = @selector(getPGPPublicKeyWithInt:withLibOrgBouncycastleOpenpgpPGPAlgorithmParameters:withJavaSecurityPublicKey:withJavaUtilDate:);
  methods[5].selector = @selector(getPGPPublicKeyWithInt:withJavaSecurityPublicKey:withJavaUtilDate:);
  methods[6].selector = @selector(getPrivateKeyWithLibOrgBouncycastleOpenpgpPGPPrivateKey:);
  methods[7].selector = @selector(getPGPPrivateKeyWithLibOrgBouncycastleOpenpgpPGPPublicKey:withJavaSecurityPrivateKey:);
  methods[8].selector = @selector(getECParameterSpecWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:);
  methods[9].selector = @selector(getECParameterSpecWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier:withLibOrgBouncycastleAsn1X9X9ECParameters:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "helper_", "LLibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fingerPrintCalculator_", "LLibOrgBouncycastleOpenpgpOperatorKeyFingerPrintCalculator;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setProvider", "LJavaSecurityProvider;", "LNSString;", "getPublicKey", "LLibOrgBouncycastleOpenpgpPGPPublicKey;", "LLibOrgBouncycastleOpenpgpPGPException;", "getPGPPublicKey", "ILLibOrgBouncycastleOpenpgpPGPAlgorithmParameters;LJavaSecurityPublicKey;LJavaUtilDate;", "ILJavaSecurityPublicKey;LJavaUtilDate;", "getPrivateKey", "LLibOrgBouncycastleOpenpgpPGPPrivateKey;", "getPGPPrivateKey", "LLibOrgBouncycastleOpenpgpPGPPublicKey;LJavaSecurityPrivateKey;", "getECParameterSpec", "LLibOrgBouncycastleAsn1ASN1ObjectIdentifier;", "LJavaSecurityNoSuchAlgorithmException;LJavaSecurityNoSuchProviderException;LJavaSecuritySpecInvalidParameterSpecException;", "LLibOrgBouncycastleAsn1ASN1ObjectIdentifier;LLibOrgBouncycastleAsn1X9X9ECParameters;", "LJavaSecuritySpecInvalidParameterSpecException;LJavaSecurityNoSuchProviderException;LJavaSecurityNoSuchAlgorithmException;" };
  static const J2ObjcClassInfo _LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter = { "JcaPGPKeyConverter", "lib.org.bouncycastle.openpgp.operator.jcajce", ptrTable, methods, fields, 7, 0x1, 10, 2, -1, -1, -1, -1, -1 };
  return &_LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter;
}

@end

void LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter_init(LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter *self) {
  NSObject_init(self);
  self->helper_ = new_LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper_initWithLibOrgBouncycastleJcajceUtilJcaJceHelper_(new_LibOrgBouncycastleJcajceUtilDefaultJcaJceHelper_init());
  self->fingerPrintCalculator_ = new_LibOrgBouncycastleOpenpgpOperatorJcajceJcaKeyFingerprintCalculator_init();
}

LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter *new_LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter_init() {
  J2OBJC_NEW_IMPL(LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter, init)
}

LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter *create_LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter_init() {
  J2OBJC_CREATE_IMPL(LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter, init)
}

JavaSecuritySpecECParameterSpec *LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter_getECParameterSpecWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter *self, LibOrgBouncycastleAsn1ASN1ObjectIdentifier *curveOid) {
  return LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter_getECParameterSpecWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1X9X9ECParameters_(self, curveOid, LibOrgBouncycastleOpenpgpOperatorJcajceJcaJcePGPUtil_getX9ParametersWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(curveOid));
}

JavaSecuritySpecECParameterSpec *LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter_getECParameterSpecWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_withLibOrgBouncycastleAsn1X9X9ECParameters_(LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter *self, LibOrgBouncycastleAsn1ASN1ObjectIdentifier *curveOid, LibOrgBouncycastleAsn1X9X9ECParameters *x9Params) {
  JavaSecurityAlgorithmParameters *params = [((LibOrgBouncycastleOpenpgpOperatorJcajceOperatorHelper *) nil_chk(self->helper_)) createAlgorithmParametersWithNSString:@"EC"];
  [((JavaSecurityAlgorithmParameters *) nil_chk(params)) init__WithJavaSecuritySpecAlgorithmParameterSpec:new_JavaSecuritySpecECGenParameterSpec_initWithNSString_(LibOrgBouncycastleAsn1X9ECNamedCurveTable_getNameWithLibOrgBouncycastleAsn1ASN1ObjectIdentifier_(curveOid))];
  return ((JavaSecuritySpecECParameterSpec *) [params getParameterSpecWithIOSClass:JavaSecuritySpecECParameterSpec_class_()]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibOrgBouncycastleOpenpgpOperatorJcajceJcaPGPKeyConverter)
