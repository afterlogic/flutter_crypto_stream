//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/com/afterlogic/pgp/platform_stream/PlatformOutputStream.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "PlatformOutputStream.h"
#include "StreamSink.h"
#include "java/io/OutputStream.h"
#include "java/util/Arrays.h"

@interface LibComAfterlogicPgpPlatform_streamPlatformOutputStream () {
 @public
  LibComAfterlogicPgpPlatform_streamStreamSink *sink_;
  IOSByteArray *buffer_;
  jboolean isClosed_;
  jint position_;
}

- (void)sendBuffer;

@end

J2OBJC_FIELD_SETTER(LibComAfterlogicPgpPlatform_streamPlatformOutputStream, sink_, LibComAfterlogicPgpPlatform_streamStreamSink *)
J2OBJC_FIELD_SETTER(LibComAfterlogicPgpPlatform_streamPlatformOutputStream, buffer_, IOSByteArray *)

inline jint LibComAfterlogicPgpPlatform_streamPlatformOutputStream_get_BUFFER_SIZE(void);
#define LibComAfterlogicPgpPlatform_streamPlatformOutputStream_BUFFER_SIZE 4096
J2OBJC_STATIC_FIELD_CONSTANT(LibComAfterlogicPgpPlatform_streamPlatformOutputStream, BUFFER_SIZE, jint)

__attribute__((unused)) static void LibComAfterlogicPgpPlatform_streamPlatformOutputStream_sendBuffer(LibComAfterlogicPgpPlatform_streamPlatformOutputStream *self);

@implementation LibComAfterlogicPgpPlatform_streamPlatformOutputStream

- (instancetype)initWithLibComAfterlogicPgpPlatform_streamStreamSink:(LibComAfterlogicPgpPlatform_streamStreamSink *)sink {
  LibComAfterlogicPgpPlatform_streamPlatformOutputStream_initWithLibComAfterlogicPgpPlatform_streamStreamSink_(self, sink);
  return self;
}

- (void)writeWithByteArray:(IOSByteArray *)b
                   withInt:(jint)off
                   withInt:(jint)len {
  LibComAfterlogicPgpPlatform_streamPlatformOutputStream_sendBuffer(self);
  if (((IOSByteArray *) nil_chk(b))->size_ == len && off == 0) {
    [((LibComAfterlogicPgpPlatform_streamStreamSink *) nil_chk(sink_)) addWithByteArray:b];
  }
  else {
    [((LibComAfterlogicPgpPlatform_streamStreamSink *) nil_chk(sink_)) addWithByteArray:JavaUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(b, off, len)];
  }
}

- (void)writeWithInt:(jint)b {
  *IOSByteArray_GetRef(nil_chk(buffer_), position_) = (jbyte) b;
  position_++;
  if (position_ == LibComAfterlogicPgpPlatform_streamPlatformOutputStream_BUFFER_SIZE) {
    LibComAfterlogicPgpPlatform_streamPlatformOutputStream_sendBuffer(self);
  }
}

- (void)close {
  if (!isClosed_) {
    isClosed_ = true;
    LibComAfterlogicPgpPlatform_streamPlatformOutputStream_sendBuffer(self);
    [super close];
  }
}

- (void)sendBuffer {
  LibComAfterlogicPgpPlatform_streamPlatformOutputStream_sendBuffer(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibComAfterlogicPgpPlatform_streamStreamSink:);
  methods[1].selector = @selector(writeWithByteArray:withInt:withInt:);
  methods[2].selector = @selector(writeWithInt:);
  methods[3].selector = @selector(close);
  methods[4].selector = @selector(sendBuffer);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sink_", "LLibComAfterlogicPgpPlatform_streamStreamSink;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "BUFFER_SIZE", "I", .constantValue.asInt = LibComAfterlogicPgpPlatform_streamPlatformOutputStream_BUFFER_SIZE, 0x1a, -1, -1, -1, -1 },
    { "buffer_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "isClosed_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "position_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibComAfterlogicPgpPlatform_streamStreamSink;", "write", "[BII", "LJavaIoIOException;", "I" };
  static const J2ObjcClassInfo _LibComAfterlogicPgpPlatform_streamPlatformOutputStream = { "PlatformOutputStream", "lib.com.afterlogic.pgp.platform_stream", ptrTable, methods, fields, 7, 0x1, 5, 5, -1, -1, -1, -1, -1 };
  return &_LibComAfterlogicPgpPlatform_streamPlatformOutputStream;
}

@end

void LibComAfterlogicPgpPlatform_streamPlatformOutputStream_initWithLibComAfterlogicPgpPlatform_streamStreamSink_(LibComAfterlogicPgpPlatform_streamPlatformOutputStream *self, LibComAfterlogicPgpPlatform_streamStreamSink *sink) {
  JavaIoOutputStream_init(self);
  self->buffer_ = [IOSByteArray newArrayWithLength:LibComAfterlogicPgpPlatform_streamPlatformOutputStream_BUFFER_SIZE];
  self->isClosed_ = false;
  self->position_ = 0;
  self->sink_ = sink;
}

LibComAfterlogicPgpPlatform_streamPlatformOutputStream *new_LibComAfterlogicPgpPlatform_streamPlatformOutputStream_initWithLibComAfterlogicPgpPlatform_streamStreamSink_(LibComAfterlogicPgpPlatform_streamStreamSink *sink) {
  J2OBJC_NEW_IMPL(LibComAfterlogicPgpPlatform_streamPlatformOutputStream, initWithLibComAfterlogicPgpPlatform_streamStreamSink_, sink)
}

LibComAfterlogicPgpPlatform_streamPlatformOutputStream *create_LibComAfterlogicPgpPlatform_streamPlatformOutputStream_initWithLibComAfterlogicPgpPlatform_streamStreamSink_(LibComAfterlogicPgpPlatform_streamStreamSink *sink) {
  J2OBJC_CREATE_IMPL(LibComAfterlogicPgpPlatform_streamPlatformOutputStream, initWithLibComAfterlogicPgpPlatform_streamStreamSink_, sink)
}

void LibComAfterlogicPgpPlatform_streamPlatformOutputStream_sendBuffer(LibComAfterlogicPgpPlatform_streamPlatformOutputStream *self) {
  if (self->position_ != 0) {
    [((LibComAfterlogicPgpPlatform_streamStreamSink *) nil_chk(self->sink_)) addWithByteArray:JavaUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(self->buffer_, 0, self->position_)];
    self->position_ = 0;
    self->buffer_ = [IOSByteArray newArrayWithLength:LibComAfterlogicPgpPlatform_streamPlatformOutputStream_BUFFER_SIZE];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibComAfterlogicPgpPlatform_streamPlatformOutputStream)
