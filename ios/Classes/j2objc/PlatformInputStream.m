//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../android/src/main/kotlin/lib/com/afterlogic/pgp/platform_stream/PlatformInputStream.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "PlatformInputStream.h"
#include "StreamCallback.h"
#include "java/io/InputStream.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/TimeUnit.h"

@interface LibComAfterlogicPgpPlatform_streamPlatformInputStream () {
 @public
  jboolean isClosed_;
  IOSByteArray *buffer_;
  jint position_;
  LibComAfterlogicPgpPlatform_streamStreamCallback *endBufferCallback_;
  JavaUtilConcurrentCountDownLatch *countDownLatch_;
}

- (jint)readBufferWithByteArray:(IOSByteArray *)output
                        withInt:(jint)size;

- (void)pause;

@end

J2OBJC_FIELD_SETTER(LibComAfterlogicPgpPlatform_streamPlatformInputStream, buffer_, IOSByteArray *)
J2OBJC_FIELD_SETTER(LibComAfterlogicPgpPlatform_streamPlatformInputStream, endBufferCallback_, LibComAfterlogicPgpPlatform_streamStreamCallback *)
J2OBJC_FIELD_SETTER(LibComAfterlogicPgpPlatform_streamPlatformInputStream, countDownLatch_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static jint LibComAfterlogicPgpPlatform_streamPlatformInputStream_readBufferWithByteArray_withInt_(LibComAfterlogicPgpPlatform_streamPlatformInputStream *self, IOSByteArray *output, jint size);

__attribute__((unused)) static void LibComAfterlogicPgpPlatform_streamPlatformInputStream_pause(LibComAfterlogicPgpPlatform_streamPlatformInputStream *self);

@implementation LibComAfterlogicPgpPlatform_streamPlatformInputStream

- (instancetype)initWithLibComAfterlogicPgpPlatform_streamStreamCallback:(LibComAfterlogicPgpPlatform_streamStreamCallback *)endBufferCallback {
  LibComAfterlogicPgpPlatform_streamPlatformInputStream_initWithLibComAfterlogicPgpPlatform_streamStreamCallback_(self, endBufferCallback);
  return self;
}

- (void)addBufferWithByteArray:(IOSByteArray *)buffer {
  position_ = 0;
  self->buffer_ = buffer;
  if (countDownLatch_ != nil) {
    [countDownLatch_ countDown];
  }
}

- (jint)readWithByteArray:(IOSByteArray *)b
                  withInt:(jint)off
                  withInt:(jint)len {
  if (off > 0) {
    LibComAfterlogicPgpPlatform_streamPlatformInputStream_readBufferWithByteArray_withInt_(self, nil, off);
  }
  return LibComAfterlogicPgpPlatform_streamPlatformInputStream_readBufferWithByteArray_withInt_(self, b, len);
}

- (jint)readBufferWithByteArray:(IOSByteArray *)output
                        withInt:(jint)size {
  return LibComAfterlogicPgpPlatform_streamPlatformInputStream_readBufferWithByteArray_withInt_(self, output, size);
}

- (jint)read {
  if (isClosed_) {
    return -1;
  }
  @try {
    jint current = IOSByteArray_Get(nil_chk(buffer_), position_);
    position_++;
    return current;
  }
  @catch (JavaLangThrowable *e) {
    LibComAfterlogicPgpPlatform_streamPlatformInputStream_pause(self);
    return [self read];
  }
}

- (void)pause {
  LibComAfterlogicPgpPlatform_streamPlatformInputStream_pause(self);
}

- (void)close {
  if (countDownLatch_ != nil) {
    [countDownLatch_ countDown];
  }
  if (!isClosed_) {
    [((LibComAfterlogicPgpPlatform_streamStreamCallback *) nil_chk(endBufferCallback_)) invoke];
    isClosed_ = true;
  }
}

- (void)onClose {
  position_ = 0;
  self->buffer_ = [IOSByteArray newArrayWithLength:0];
  [self close];
  if (countDownLatch_ != nil) {
    [countDownLatch_ countDown];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 4, 5, -1, -1, -1 },
    { NULL, "I", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLibComAfterlogicPgpPlatform_streamStreamCallback:);
  methods[1].selector = @selector(addBufferWithByteArray:);
  methods[2].selector = @selector(readWithByteArray:withInt:withInt:);
  methods[3].selector = @selector(readBufferWithByteArray:withInt:);
  methods[4].selector = @selector(read);
  methods[5].selector = @selector(pause);
  methods[6].selector = @selector(close);
  methods[7].selector = @selector(onClose);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "isClosed_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "buffer_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "position_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "endBufferCallback_", "LLibComAfterlogicPgpPlatform_streamStreamCallback;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "countDownLatch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LLibComAfterlogicPgpPlatform_streamStreamCallback;", "addBuffer", "[B", "read", "[BII", "LJavaIoIOException;", "readBuffer", "[BI" };
  static const J2ObjcClassInfo _LibComAfterlogicPgpPlatform_streamPlatformInputStream = { "PlatformInputStream", "lib.com.afterlogic.pgp.platform_stream", ptrTable, methods, fields, 7, 0x1, 8, 5, -1, -1, -1, -1, -1 };
  return &_LibComAfterlogicPgpPlatform_streamPlatformInputStream;
}

@end

void LibComAfterlogicPgpPlatform_streamPlatformInputStream_initWithLibComAfterlogicPgpPlatform_streamStreamCallback_(LibComAfterlogicPgpPlatform_streamPlatformInputStream *self, LibComAfterlogicPgpPlatform_streamStreamCallback *endBufferCallback) {
  JavaIoInputStream_init(self);
  self->isClosed_ = false;
  self->buffer_ = [IOSByteArray newArrayWithLength:0];
  self->position_ = 0;
  self->endBufferCallback_ = endBufferCallback;
}

LibComAfterlogicPgpPlatform_streamPlatformInputStream *new_LibComAfterlogicPgpPlatform_streamPlatformInputStream_initWithLibComAfterlogicPgpPlatform_streamStreamCallback_(LibComAfterlogicPgpPlatform_streamStreamCallback *endBufferCallback) {
  J2OBJC_NEW_IMPL(LibComAfterlogicPgpPlatform_streamPlatformInputStream, initWithLibComAfterlogicPgpPlatform_streamStreamCallback_, endBufferCallback)
}

LibComAfterlogicPgpPlatform_streamPlatformInputStream *create_LibComAfterlogicPgpPlatform_streamPlatformInputStream_initWithLibComAfterlogicPgpPlatform_streamStreamCallback_(LibComAfterlogicPgpPlatform_streamStreamCallback *endBufferCallback) {
  J2OBJC_CREATE_IMPL(LibComAfterlogicPgpPlatform_streamPlatformInputStream, initWithLibComAfterlogicPgpPlatform_streamStreamCallback_, endBufferCallback)
}

jint LibComAfterlogicPgpPlatform_streamPlatformInputStream_readBufferWithByteArray_withInt_(LibComAfterlogicPgpPlatform_streamPlatformInputStream *self, IOSByteArray *output, jint size) {
  jint outPos = 0;
  while (outPos < size) {
    if (self->isClosed_) {
      if (outPos == 0) {
        return -1;
      }
      return outPos;
    }
    jint len = JavaLangMath_minWithInt_withInt_(size - outPos, ((IOSByteArray *) nil_chk(self->buffer_))->size_ - self->position_);
    if (output != nil) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->buffer_, self->position_, output, outPos, len);
    }
    outPos += len;
    self->position_ += len;
    if (self->position_ >= ((IOSByteArray *) nil_chk(self->buffer_))->size_) {
      LibComAfterlogicPgpPlatform_streamPlatformInputStream_pause(self);
      if (self->isClosed_) {
        return outPos;
      }
    }
  }
  return outPos;
}

void LibComAfterlogicPgpPlatform_streamPlatformInputStream_pause(LibComAfterlogicPgpPlatform_streamPlatformInputStream *self) {
  self->countDownLatch_ = new_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  [((LibComAfterlogicPgpPlatform_streamStreamCallback *) nil_chk(self->endBufferCallback_)) invoke];
  @try {
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(self->countDownLatch_)) awaitWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  }
  @catch (JavaLangInterruptedException *e) {
    [e printStackTrace];
  }
  self->countDownLatch_ = nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LibComAfterlogicPgpPlatform_streamPlatformInputStream)
